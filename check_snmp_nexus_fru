#!/usr/bin/env perl

#####
# check_snmp_nexus_fru:
# Check script for nagios
#
# Author: Diddi Oscarsson <diddi@diddi.se>
#####

use warnings;
use strict;

use Nagios::Plugin;
use Nagios::Plugin::Functions qw(%STATUS_TEXT);
use Net::SNMP qw(:snmp);
use POSIX;

my $np = Nagios::Plugin->new(
  usage => "Usage: %s -H <host> -C <community> -m <model>");

$np->add_arg(
  spec => "host|H=s",
  help => "-H, --host <hostname>. Set the host/ip to send snmp queries to.",
  required => 1,
);

$np->add_arg(
  spec => "community|C=s",
  help => "-C, --community <community>. Set the SNMP community to use for the query.",
  required => 1,
);

$np->add_arg(
  spec => 'model|m=s',
  help => "-m, --model <model>. Set the device model to, \"nexus7000\" or \"nexus5000\".",
  required => 1,
);

$np->getopts;

my $severity = OK;
my $fru;
my $descr_length = 0;

my %oids = ('nexus7000' => {operstate => '1.3.6.1.4.1.9.9.117.1.1.2.1.2',
                            physicaldescr => '.1.3.6.1.2.1.47.1.1.1.1.2'
                           },
           );

my @fru_operstates = ('Unknown',
                      'OffEnvOther',
                      'On',
                      'OffAdmin',
                      'OffDenied',
                      'OffEnvPower',
                      'OffEnvTemp',
                      'OffEnvFan',
                      'Failed',
                      'OnButFanFail',
                      'OffCooling',
                      'OffConnectorRating',
                      'OnButInlinePowerFail'
);

my %fru_status = ('Unknown' => WARNING,
                  'OffEnvOther' => WARNING,
                  'On' => OK,
                  'OffAdmin' => WARNING,
                  'OffDenied' => CRITICAL,
                  'OffEnvPower' => CRITICAL,
                  'OffEnvTemp' => CRITICAL,
                  'OffEnvFan' => CRITICAL,
                  'Failed' => CRITICAL,
                  'OnButFanFail' => WARNING,
                  'OffCooling' => CRITICAL,
                  'OffConnectorRating' => CRITICAL,
                  'OnButInlinePowerFail' => WARNING
);

sub snmp_scan {
  my $result = undef;

  # Get all FRUs and their current states
  $result = snmpbulk($np->opts->host, $np->opts->community, $oids{$np->opts->model}->{operstate});
  for my $oid (oid_lex_sort(keys %{$result})) {
    my $id = $1 if $oid =~ /\.([0-9]+)$/;
    $fru->{$id}->{'state'} = $fru_operstates[$result->{$oid}];

    if($fru_status{$fru->{$id}->{'state'}} > $severity) {
      $severity = $fru_status{$fru->{$id}->{'state'}};
    }
  }

  # Get FRU descriptions for each FRU
  $result = snmpbulk($np->opts->host, $np->opts->community, $oids{$np->opts->model}->{physicaldescr});
  for my $oid (oid_lex_sort(keys %{$result})) {
    my $descr = $result->{$oid};
    my $id = $1 if $oid =~ /\.([0-9]+)$/;
    $fru->{$id}->{'description'} = $descr if $fru->{$id};
    $descr_length = length($descr) if length($descr) > $descr_length;
  }

  return 0;
}


sub print_status {
  my $format_string = "%-".$descr_length."s   => %s (%s)\n";
  foreach my $id (keys(%{$fru})) {
    my $state = $fru->{$id}->{'state'};
    my $status = $fru_status{$state};
    printf("$format_string", $fru->{$id}->{'description'}, $state, $STATUS_TEXT{$status});
  }

  return 0;
}

sub snmpbulk {
  my $host = shift;
  my $community = shift;
  my $base_oid = shift;
  my $result;

  my ($session, $error) = Net::SNMP->session(
    -hostname => $host,
    -community => $community,
    -nonblocking => 1,
    -timeout => 5,
    -port => 161,
    -version => 'snmpv2c',
  );

  if(not defined($session)) {
    printf("ERROR: %s.\n", $error);
    exit(UNKNOWN);
  }

  my %table; # Hash to store the results
  $result = $session->get_bulk_request(
     -varbindlist    => [ $base_oid ],
     -callback       => [ \&table_callback, \%table, $base_oid],
     -maxrepetitions => 10,
  );

  if (!defined $result) {
     printf "ERROR: %s\n", $session->error();
     $session->close();
     exit (UNKNOWN);
  }

  # Now initiate the SNMP message exchange.
  snmp_dispatcher();
  $session->close();
  $session = undef;

  return \%table;
}

sub table_callback
{
   my ($session, $table, $base) = @_;

   my $list = $session->var_bind_list();

   if (!defined $list) {
      printf "ERROR: %s\n", $session->error();
      return;
   }

   # Loop through each of the OIDs in the response and assign
   # the key/value pairs to the reference that was passed with
   # the callback. Make sure that we are still in the table
   # before assigning the key/values.

   my @names = $session->var_bind_names();
   my $next  = undef;

   while (@names) {
      $next = shift @names;
      if (!oid_base_match($base, $next)) {
        return; # Table is done.
      }
      $table->{$next} = $list->{$next};
   }

   # Table is not done, send another request, starting at the last
   # OBJECT IDENTIFIER in the response. No need to include the
   # calback argument, the same callback that was specified for the
   # original request will be used.

   my $result = $session->get_bulk_request(
      -varbindlist    => [ $next ],
      -maxrepetitions => 10,
   );

   if (!defined $result) {
      printf "ERROR: %s.\n", $session->error();
   }

   return;
}

snmp_scan();
print_status();
exit($severity);


